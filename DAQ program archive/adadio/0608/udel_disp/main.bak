// $URL: http://subversion:8080/svn/gsc/trunk/drivers/LINUX/ADADIO/ADADIO_Linux_3.x.x.x_GSC_DN/savedata/main.c $
// $Rev: 1620 $
// $Date: 2009-04-10 11:41:41 -0500 (Fri, 10 Apr 2009) $

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

#include "udel_daq.h"
#include "main.h"




// variables	***************************************************************

static	int		_continuous		= 0;
static	int		_ignore_errors	= 0;
static	int		_index			= 0;
static	__s32	_io_mode		= GSC_IO_MODE_PIO;
static	long	_minute_limit	= 0;
static	int		_test_limit		= -1;



/******************************************************************************
*
*	Function:	_parse_args
*
*	Purpose:
*
*		Parse the command line arguments.
*
*	Arguments:
*
*		argc	The number of command line arguments given.
*
*		argv	The list of command line arguments given.
*
*	Returned:
*
*		>= 0	The number of errors encounterred.
*
******************************************************************************/

static int _parse_args(int argc, char** argv)
{
	char	c;
	int		errs	= 0;
	int		i;
	int		j;
	int		k;

	printf("USAGE: savedata <-c> <-C> <-dma> <-dmdma> <-m#> <-n#> <-pio*> <index>\n");
	printf("   -c      Continue testing until an error occurs.\n");
	printf("   -C      Continue testing even if errors occur.\n");
	printf("   -dma    Use standard DMA for data transfer.\n");
	printf("   -dmama  Use Deman Mode DMA for data transfer.\n");
	printf("   -m#     Run for at most # minutes (a decimal number).\n");
	printf("   -n#     Repeat test at most # times (a decimal number).\n");
	printf("   -pio    Use PIO for data transfer. This is the default.\n");
	printf("   index   The index of the board to access.\n");
	printf(" NOTE: Hit Ctrl-C to abort continuous testing.\n");

	for (i = 1; i < argc; i++)
	{
		if (strcmp(argv[i], "-c") == 0)
		{
			_continuous		= 1;
			_ignore_errors	= 0;
			continue;
		}

		if (strcmp(argv[i], "-C") == 0)
		{
			_continuous		= 1;
			_ignore_errors	= 1;
			continue;
		}

		if (strcmp(argv[i], "-dma") == 0)
		{
			_io_mode	= GSC_IO_MODE_DMA;
			continue;
		}

		if (strcmp(argv[i], "-dmdma") == 0)
		{
			_io_mode	= GSC_IO_MODE_DMA;
			continue;
		}

		if (strcmp(argv[i], "-pio") == 0)
		{
			_io_mode	= GSC_IO_MODE_PIO;
			continue;
		}

		if ((argv[i][0] == '-') && (argv[i][1] == 'm') && (argv[i][2]))
		{
			j	= sscanf(&argv[i][2], "%d%c", &k, &c);

			if ((j == 1) && (k > 0))
			{
				_minute_limit	= k;
				continue;
			}

			errs	= 1;
			printf("ERROR: invalid argument: %s\n", argv[i]);
			break;
		}

		if ((argv[i][0] == '-') && (argv[i][1] == 'n') && (argv[i][2]))
		{
			j	= sscanf(&argv[i][2], "%d%c", &k, &c);

			if ((j == 1) && (k > 0))
			{
				_test_limit	= k;
				continue;
			}

			errs	= 1;
			printf("ERROR: invalid argument: %s\n", argv[i]);
			break;
		}

		j	= sscanf(argv[i], "%d%c", &k, &c);

		if ((j == 1) && (k >= 0))
		{
			_index	= k;
			continue;
		}
		else
		{
			errs	= 1;
			printf("ERROR: invalid board selection: %s\n", argv[i]);
			break;
		}
	}

	return(errs);
}



/******************************************************************************
*
*	Function:	_perform_tests
*
*	Purpose:
*
*		Perform the appropriate testing.
*
*	Arguments:
*
*		fd		The handle for the board to access.
*
*	Returned:
*
*		>= 0	The number of errors encounterred.
*
******************************************************************************/

static int _perform_tests(int fd)
{
	int			errs	= 0;
	const char*	psz;
	struct tm*	stm;
	time_t		tt;

	time(&tt);
	stm	= localtime(&tt);
	psz	= asctime(stm);
	gsc_label("Performing Operation");
	printf("%s", psz);

	errs	+= gsc_id_driver(fd, ADADIO_BASE_NAME);
	errs	+= adadio_id_board(fd, -1, NULL);

	errs	+= save_data(fd, _io_mode);

	return(errs);
}

static int _channels(int fd, __s32* chans)
{
	char	buf[64];
	int		errs	= 0;
	__s32	last	= -1;

	gsc_label("Input Channels");

	errs	+= adadio_dsl_ioctl(fd, ADADIO_IOCTL_AIN_CHAN_LAST,	&last	);

	if (errs == 0)
	{
		chans[0]	= last + 1;

		if (last == 0)
			sprintf(buf, "# %ld", (long) last);
		else
			sprintf(buf, "#s 0-%ld", (long) last);

		printf(	"%ld Channel%s  (%s)\n",
				(long) chans[0],
				(chans[0] == 1) ? "" : "s",
				buf);
	}

	return(errs);
}


/******************************************************************************
*
*	Function:	main
*
*	Purpose:
*
*		Control the overall flow of the application.
*
*	Arguments:
*
*		argc			The number of command line arguments.
*
*		argv			The list of command line arguments.
*
*	Returned:
*
*		EXIT_SUCCESS	We tested a device.
*		EXIT_FAILURE	We didn't test a device.
*
******************************************************************************/

int main( void){

	struct my_msgbuf buf;
	int msqid;
	key_t key; 


	int qty, errs, fd = 0, ret = EXIT_FAILURE;
	__u32 *_buffer;
	long BUFFERSIZE = 1024l * 1024l;
	__s32 chans = 32;

	gsc_label_init(28);
	gsc_id_host();
	qty = gsc_count_boards(ADADIO_BASE_NAME);
	errs = gsc_select_1_board(qty, &_index);

	gsc_label("Accessing Board Index");
	printf("%d\n", _index);
	fd = gsc_dev_open(_index, ADADIO_BASE_NAME);

	if (fd == -1)
	{
		errs	= 1;
		printf(	"ERROR: Unable to access device %d.", _index);
	}

	
	if (errs == 0)
	{
		ret = EXIT_SUCCESS;
		errs += gsc_id_driver(fd, ADADIO_BASE_NAME);
		errs += adadio_id_board(fd, -1, NULL);

		_buffer = malloc( BUFFERSIZE );
		if ( _buffer == NULL ) 
		{
			printf("malloc error\n");
			return(-1);
		}
	

		gsc_label("Capture & Save");
		printf("\n");
		gsc_label_level_inc();

		errs += adadio_config(fd, -1);
		errs += adadio_rx_io_mode(fd, -1, _io_mode, NULL);
		errs += adadio_ain_nrate(fd, -1, 2000, NULL);
		errs += adadio_rx_io_timeout(fd, -1, 600, NULL);
		errs += _channels(fd, &chans);
	}

	


//------------------------------------------------------------------
	printf("MSG begins!\n");
	if ((key = ftok(IPC_msg_path, 'B')) == -1) {
        	perror("ftok");
        	exit(1);
    	}

	if ((msqid = msgget(key, 0644 | IPC_CREAT)) == -1) {
        	perror("msgget");
        	exit(1);
	}
    
	buf.mtype = 1; /* we don't really care in this case */
	int ix = 48;
	//while(gets(buf.mtext), !feof(stdin)) {
	while(ix < 53)
	{
		ret = read(fd, _buffer, BUFFERSIZE);
		printf("req=%ld ret=%ld\n",(long)sizeof(_buffer), ret);

		//sleep(1);
		buf.mtext[0] = ix++;
		buf.mtext[1] = '\0';
	        if (msgsnd(msqid, (struct msgbuf *)&buf, sizeof(buf), 0) == -1)
	            perror("msgsnd");
	}

	if (msgctl(msqid, IPC_RMID, NULL) == -1) 
	{
        	perror("msgctl");
	        exit(1);
	}

	gsc_dev_close(_index, fd);
	return 0;
}

int main2(int argc, char *argv[])
{
	int		errs;
	time_t	exec		= time(NULL);
	long	failures	= 0;
	int		fd			= 0;
	long	hours;
	long	mins;
	time_t	now;
	long	passes		= 0;
	int		qty;
	int		ret			= EXIT_FAILURE;
	long	secs;
	time_t	t_limit;
	time_t	test;
	long	tests		= 0;


	gsc_label_init(28);

	for (;;)
	{
		test	= time(NULL);
		//printf("savedata - Capture and Save Data to Disk (Version %s)\n", VERSION);
		//errs	= _parse_args(argc, argv);

		if (errs)
			break;

		gsc_id_host();
		t_limit	= exec + (_minute_limit * 60);
		qty		= gsc_count_boards(ADADIO_BASE_NAME);
		errs	= gsc_select_1_board(qty, &_index);
		if ((qty <= 0) || (errs))
			break;

		gsc_label("Accessing Board Index");
		printf("%d\n", _index);
		fd	= gsc_dev_open(_index, ADADIO_BASE_NAME);

		if (fd == -1)
		{
			errs	= 1;
			printf(	"ERROR: Unable to access device %d.", _index);
		}

		if (errs == 0)
		{
			ret		= EXIT_SUCCESS;
			errs	= _perform_tests(fd);
		}

		gsc_dev_close(_index, fd);

		now	= time(NULL);
		tests++;

		if (errs)
		{
			failures++;
			printf(	"\nRESULTS: FAIL <---  (%d error%s)",
					errs,
					(errs == 1) ? "" : "s");
		}
		else
		{
			passes++;
			printf("\nRESULTS: PASS");
		}

		secs	= now - test;
		hours	= secs / 3600;
		secs	= secs % 3600;
		mins	= secs / 60;
		secs	= secs % 60;
		printf(" (duration %ld:%ld:%02ld)\n", hours, mins, secs);

		secs	= now - exec;
		hours	= secs / 3600;
		secs	= secs % 3600;
		mins	= secs / 60;
		secs	= secs % 60;
		printf(	"SUMMARY: tests %ld, pass %ld, fail %ld"
				" (duration %ld:%ld:%02ld)\n\n",
				tests,
				passes,
				failures,
				hours,
				mins,
				secs);

		if ((_test_limit > 0) && (_test_limit <= tests))
			break;

		if (_continuous == 0)
			break;

		if ((_ignore_errors == 0) && (errs))
			break;

		if ((_minute_limit) && (now >= t_limit))
			break;
	}

	return(ret);
}



